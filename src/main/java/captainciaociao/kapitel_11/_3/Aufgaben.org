#+title: Aufgaben
* Adresszeilen mit dem StringTokenizer zerlegen
Die Software von Captain CiaoCiao muss Adressen auswerten, die aus drei oder vier Zeilen bestehen.


|-------+--------+----------|
| Zeile | Inhalt | optional |
|-------+--------+----------|
|     1 | Name   | nein     |
|     2 | Straße | nein     |
|     3 | Ort    | nein     |
|     4 | land   | ja       |
|-------+--------+----------|

Die Zeilen sind mit einem Zeilenumbruch getrennt, wobei es vier gültige Trennungszeichen gibt.:

|---------+---------+-------------+----------------|
| Zeichen | Dezimal | Hexadezimal | Escape-Sequenz |
|---------+---------+-------------+----------------|
| LF      | 10      | 0A          | \n             |
| CR      | 13      | 0D          | \r             |
| CR LF   | 13 10   | 0D 0A       | \r\n           |
| LF CR   | 10 13   | 0A 0D       | \n\r           |
|---------+---------+-------------+----------------|

- Zerlege eine durch Zeilenumbrüche getrennte Zeichenfolge in vier Zeilen, und weise die Zeilen den Variablen ~name, street, city, country~ zu.
- Falls eine vierte Zeile mit dem Landesnamen nicht gegeben ist, soll ~country~ gleich ~"Drusselstein"~ sein.
- Setze die Zeile als CSV-Zeile durch Semikolons getrennt wieder zusammen.



** Beispiele
- "Boots and Bootles\n21 Pickle Street\n424242 Douglas \nArendelle"
- "Doofenshmirtz Evil Inc. \nStrudelkuschel 4427\nDanville"
* Sätze in Wörter zerlegen und umdrehen
** Aufgabe
- Zerlege den String in Wörter. Separatoren der sind Leerzeichen und Satzzeichen.
- Drehe alle Wörter einzeln um.
- Gib die Wörter hintereinander mit einem Leerzeichen getrennt aus. Die Satzzeichen und sonstige Separatoren spielen keine Rolle.
** Beispiel
#+begin_example
"erehW did eht etarip esahcrup sih kooh? tA eht dnah-dnoces pohs!" -->
"Where did the pirate purchase his hook At the hand second shop"
#+end_example
* Relationen zwischen Zahlen prüfen
** Aufgabe
- Schreibe ein Programm, das einen wie in dem Beispiel aufgebauten String bekommt und ~true~ liefert, wenn alle Relationszeichen korrekt sind, und sonnst ~false~.
** Beispiele
- "1 < 2 > 1 < 10 = 10 > 2" --> true
- "1 < 1" --> false
- "1 <" --> false
- "1" --> true
* A1-Notation in Spalten und Zeilen umwandeln
Zellen in Tabellen können mit Zahlen genannt werden zb.: 4-16 bedeutet 4. Spalte, 16. Zeile. Es gibt eine weitere Methode Zellen zu benennen: Die A1-Notation. Dabei kodiert man die Spalten nach Buchstaben von A bis Z, nach folgendem Schema:
A, B, ..., Z, AA, ..., AZ, BA, ..., ZZ, AAA, AAB, ...
** Aufgabe
Schreibe eine Methode ~parseA1Notation(String)~, die einen ~String~ in der A1-Notation bekommt und ein Array mit zwei Elementen zurückliefert, in dem an der Position 0 die Spalte und an der Position 1 die Zeile steht.
** Beispiele
- ~parseA1Notation("A1")~ --> [1, 1]
- ~parseA1Notation("Z2")~ --> [26, 2]
- ~parseA1Notation("AA34")~ --> [27, 34]
- ~parseA1Notation("AA34")~ --> [27, 34]
- ~parseA1Notation("BZ")~ --> [0, 0]
- ~parseA1Notation("34")~ --> [0, 0]
- ~parseA1Notation(" ")~ --> [0, 0]
- ~parseA1Notation("")~ --> [0, 0]
* Einfache CSV-Dateien mit Koordinaten parsen
#+begin_example
20.091612,-155.676695
23.087301,-74.643472
21.305452,-71.690421
#+end_example

** Aufgaben
- Lege von Hand eine CSV-Datei an. Sie soll mehrere Zeilen mit Koordinaten haben.
- Ein Java Programm soll die CSV-Datei einlesen und in einer HTML-Datei mit SVG für den Polygonzug auf dem Bildschirm ausgeben.
- Greife zum Parsen der Datei auf ~Scanner~ zurück. Achte darauf, den ~Scanner~ mit ~useLocale(Locale.ENGLISH)~ zu initialisieren.

* Strings verlustfrei durch Lauflängenkodierung komprimieren
Nehmen wir an, ein String bestände aus einer Folge von . und - Zeichen:
#+begin_example
--....--------..--
#+end_example
Um die Länge von Zeichenketten zu verkürzen, können wir zunächst das Symbol gefolgt von der Anzahl der Symbole schreiben. Die Folge mit 17 Zeichenketten könnte auf folgende Zeichenfolge mit 9 Zeichen verkürzt werden:
#+begin_example
-2.4-8-2-
#+end_example

** Aufgabe:
- Lege eine neue Klasse ~SimpleStringCompressor~ an.
- Schreibe eine statische Methode ~String compress(String)~, die Folgen von . und - nach dem beschriebenen Algorithmus kodiert.
- Schreibe einen Dekodierer ~String decompress(String)~, der den komprimierten String wieder auspackt. Es soll ~decompress(compress(input))~ gleich input sein.
** Erweiterung
- Das Programm soll alle nicht-Ziffern verarbeiten können.
- Verfeinere das Programm so, das die Zahl weg bleibt, wenn das Zeichen nur genau einmal vorkommt.
